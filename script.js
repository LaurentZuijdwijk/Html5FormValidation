// Generated by CoffeeScript 1.3.3
var HTML5Form,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

HTML5Form = (function() {
  "use strict";

  var CheckboxFormField, EmailFormField, FormField, FormPlaceholderDecorator, SelectFormField, TelFormField, TextAreaFormField, TextFormField, UrlFormField;

  function HTML5Form() {}

  HTML5Form.FormPlaceholderDecorator = FormPlaceholderDecorator = (function() {

    function FormPlaceholderDecorator(textFormField) {
      this.textFormField = textFormField;
      this.blur = __bind(this.blur, this);

      this.focus = __bind(this.focus, this);

      this.textFormField.$element.bind('blur', this.blur);
      this.textFormField.$element.bind('focus', this.focus);
      this.textFormField.element.value = this.placeholder();
      this.textFormField.$element.addClass('placeholder');
    }

    FormPlaceholderDecorator.prototype.placeholder = function() {
      return this.textFormField.$element.attr('placeholder');
    };

    FormPlaceholderDecorator.prototype.focus = function(e) {
      if (this.textFormField.$element.val() === this.placeholder()) {
        this.textFormField.element.value = '';
        return this.textFormField.$element.removeClass('placeholder');
      }
    };

    FormPlaceholderDecorator.prototype.blur = function() {
      if (this.textFormField.$element.val() === '') {
        this.textFormField.element.value = this.placeholder();
        return this.textFormField.$element.addClass('placeholder');
      }
    };

    return FormPlaceholderDecorator;

  })();

  HTML5Form.FormField = FormField = (function() {

    FormField.prototype.required = false;

    function FormField(element) {
      this.element = element;
      this.$element = $(this.element);
      if (this.$element.attr('autofocus')) {
        this.$element.focus();
      }
    }

    FormField.prototype.validate = function() {
      var validate;
      validate = this._validate();
      if (!validate) {
        this.$element.addClass('invalid');
      }
      return validate;
    };

    FormField.prototype._validate = function() {
      return true;
    };

    return FormField;

  })();

  HTML5Form.TextFormField = TextFormField = (function(_super) {

    __extends(TextFormField, _super);

    TextFormField.prototype.pattern = null;

    function TextFormField(element) {
      this.element = element;
      this.blur = __bind(this.blur, this);

      this.focus = __bind(this.focus, this);

      TextFormField.__super__.constructor.call(this, this.element);
      this.$element.bind('focus', this.focus);
      this.$element.bind('blur', this.blur);
      if (this.$element.attr('placeholder')) {
        new HTML5Form.FormPlaceholderDecorator(this);
      }
    }

    TextFormField.prototype.focus = function(event) {
      return this.$element.removeClass('invalid');
    };

    TextFormField.prototype.blur = function(event) {
      if (!this._validate()) {
        return this.$element.addClass('invalid');
      }
    };

    TextFormField.prototype._validate = function() {
      var _return;
      if (this.$element.attr('pattern')) {
        this.pattern = new RegExp(this.$element.attr('pattern'));
      }
      this.val = this.$element.val();
      _return = true;
      if (this.pattern && this.val.length > 0 && this.val.search(this.pattern) === -1) {
        _return = false;
      } else if (this.$element.attr('required') && this.val.length === 0) {
        _return = false;
      }
      return _return;
    };

    return TextFormField;

  })(HTML5Form.FormField);

  HTML5Form.EmailFormField = EmailFormField = (function(_super) {

    __extends(EmailFormField, _super);

    function EmailFormField() {
      return EmailFormField.__super__.constructor.apply(this, arguments);
    }

    EmailFormField.prototype.pattern = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/i;

    return EmailFormField;

  })(HTML5Form.TextFormField);

  HTML5Form.TelFormField = TelFormField = (function(_super) {

    __extends(TelFormField, _super);

    function TelFormField() {
      return TelFormField.__super__.constructor.apply(this, arguments);
    }

    TelFormField.prototype.pattern = /^([0-9\(\)\/]*)$/i;

    return TelFormField;

  })(HTML5Form.TextFormField);

  HTML5Form.UrlFormField = UrlFormField = (function(_super) {

    __extends(UrlFormField, _super);

    function UrlFormField() {
      return UrlFormField.__super__.constructor.apply(this, arguments);
    }

    return UrlFormField;

  })(HTML5Form.TextFormField);

  HTML5Form.SelectFormField = SelectFormField = (function(_super) {

    __extends(SelectFormField, _super);

    function SelectFormField(element) {
      this.element = element;
      this.blur = __bind(this.blur, this);

      this.focus = __bind(this.focus, this);

      SelectFormField.__super__.constructor.call(this, this.element);
      this.$element.bind('focus', this.focus);
      this.$element.bind('blur', this.blur);
    }

    SelectFormField.prototype.focus = function(event) {
      return this.$element.removeClass('invalid');
    };

    SelectFormField.prototype.blur = function(event) {
      if (!this._validate()) {
        return this.$element.addClass('invalid');
      }
    };

    SelectFormField.prototype._validate = function() {
      this.val = this.$element.val();
      if (this.$element.attr('required') && this.val.length === 0) {
        return false;
      }
      return true;
    };

    return SelectFormField;

  })(HTML5Form.FormField);

  HTML5Form.CheckboxFormField = CheckboxFormField = (function(_super) {

    __extends(CheckboxFormField, _super);

    CheckboxFormField.names = [];

    function CheckboxFormField(element) {
      var name, _i, _len, _ref;
      this.element = element;
      CheckboxFormField.__super__.constructor.call(this, this.element);
      this.name = this.$element.attr('name');
      _ref = HTML5Form.CheckboxFormField.names;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (this.name === name) {
          return {
            validate: function() {
              return true;
            }
          };
        }
      }
      HTML5Form.CheckboxFormField.names.push(this.$element.attr('name'));
      console.log(this.name);
    }

    CheckboxFormField.prototype.validate = function() {
      if ($('form input[name=' + this.name + ']:checked').length > 0) {
        return true;
      }
      return false;
    };

    return CheckboxFormField;

  })(HTML5Form.FormField);

  HTML5Form.TextAreaFormField = TextAreaFormField = (function(_super) {

    __extends(TextAreaFormField, _super);

    function TextAreaFormField() {
      return TextAreaFormField.__super__.constructor.apply(this, arguments);
    }

    return TextAreaFormField;

  })(HTML5Form.TextFormField);

  return HTML5Form;

}).call(this);

$.fn.html5FormValidator = function() {
  var formFieldFactory, html5form;
  html5form = new HTML5Form();
  formFieldFactory = function(element) {
    console.log(element.tagName);
    if (element.tagName.toUpperCase() === 'SELECT') {
      return new HTML5Form.SelectFormField(element);
    } else if (element.tagName.toUpperCase() === 'TEXTAREA') {
      return new HTML5Form.TextAreaFormField(element);
    } else {
      switch ($(element).attr('type')) {
        case 'email':
          return new HTML5Form.EmailFormField(element);
        case 'tel':
          return new HTML5Form.TelFormField(element);
        case 'url':
          return new HTML5Form.UrlFormField(element);
        case 'checkbox':
          return new HTML5Form.CheckboxFormField(element);
        default:
          return new HTML5Form.TextFormField(element);
      }
    }
  };
  return this.each(function() {
    var checkInputFields, errors, fields, form, input, _i, _len, _ref, _results,
      _this = this;
    form = $(this);
    fields = [];
    errors = [];
    form.find('textarea, select, input:not(:submit,:button,:image)').each(function() {
      return fields.push(formFieldFactory(this));
    });
    checkInputFields = function() {
      var field, _i, _len, _results;
      errors = [];
      _results = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        if (!field.validate()) {
          _results.push(errors.push(field));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    _ref = form.find('input:submit, input:image, input:button');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input = _ref[_i];
      _results.push($(input).click(function(event) {
        errors = checkInputFields();
        if (!errors.length) {
          return true;
        } else {
          event.preventDefault();
          form.trigger('error', errors);
          return false;
        }
      }));
    }
    return _results;
  });
};

$().ready(function() {
  return $('form').html5FormValidator();
});
